/*
 * Generated by gdbus-codegen 2.42.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GDD_MANAGER_H__
#define __GDD_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DVB.Manager */

#define GDD_MANAGER_TYPE_ (gdd_manager__get_type ())
#define GDD_MANAGER_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDD_MANAGER_TYPE_, GddManager))
#define GDD_MANAGER_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDD_MANAGER_TYPE_))
#define GDD_MANAGER__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDD_MANAGER_TYPE_, GddManagerIface))

struct _GddManager;
typedef struct _GddManager GddManager;
typedef struct _GddManagerIface GddManagerIface;

struct _GddManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_channel_group) (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_add_device_to_new_group) (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_adapter,
    guint arg_frontend,
    gint arg_type,
    const gchar *arg_channels_conf,
    const gchar *arg_recordings_dir,
    const gchar *arg_name);

  gboolean (*handle_get_adapter_info) (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_adapter,
    guint arg_frontend);

  gboolean (*handle_get_channel_groups) (
    GddManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_device_group) (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_group_id);

  gboolean (*handle_get_device_group_size) (
    GddManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_devices) (
    GddManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_name_of_registered_device) (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_adapter,
    guint arg_frontend);

  gboolean (*handle_get_registered_device_groups) (
    GddManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_scanner_for_device) (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_adapter,
    guint arg_frontend,
    gint arg_type);

  gboolean (*handle_remove_channel_group) (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    gint arg_channel_group_id);

  void (*group_added) (
    GddManager *object,
    guint arg_group_id);

  void (*group_removed) (
    GddManager *object,
    guint arg_group_id);

};

GType gdd_manager__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdd_manager__interface_info (void);
guint gdd_manager__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdd_manager__complete_get_scanner_for_device (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *opath,
    const gchar *dbusiface,
    gboolean result);

void gdd_manager__complete_get_registered_device_groups (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *result);

void gdd_manager__complete_get_device_group (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *opath,
    gboolean result);

void gdd_manager__complete_add_device_to_new_group (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void gdd_manager__complete_get_name_of_registered_device (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *name,
    gboolean result);

void gdd_manager__complete_get_device_group_size (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    gint result);

void gdd_manager__complete_get_channel_groups (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *result);

void gdd_manager__complete_add_channel_group (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    gint channel_group_id,
    gboolean result);

void gdd_manager__complete_remove_channel_group (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void gdd_manager__complete_get_devices (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *result);

void gdd_manager__complete_get_adapter_info (
    GddManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *info,
    gboolean result);



/* D-Bus signal emissions functions: */
void gdd_manager__emit_group_added (
    GddManager *object,
    guint arg_group_id);

void gdd_manager__emit_group_removed (
    GddManager *object,
    guint arg_group_id);



/* D-Bus method calls: */
void gdd_manager__call_get_scanner_for_device (
    GddManager *proxy,
    guint arg_adapter,
    guint arg_frontend,
    gint arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_get_scanner_for_device_finish (
    GddManager *proxy,
    gchar **out_opath,
    gchar **out_dbusiface,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_get_scanner_for_device_sync (
    GddManager *proxy,
    guint arg_adapter,
    guint arg_frontend,
    gint arg_type,
    gchar **out_opath,
    gchar **out_dbusiface,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_get_registered_device_groups (
    GddManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_get_registered_device_groups_finish (
    GddManager *proxy,
    gchar ***out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_get_registered_device_groups_sync (
    GddManager *proxy,
    gchar ***out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_get_device_group (
    GddManager *proxy,
    guint arg_group_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_get_device_group_finish (
    GddManager *proxy,
    gchar **out_opath,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_get_device_group_sync (
    GddManager *proxy,
    guint arg_group_id,
    gchar **out_opath,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_add_device_to_new_group (
    GddManager *proxy,
    guint arg_adapter,
    guint arg_frontend,
    gint arg_type,
    const gchar *arg_channels_conf,
    const gchar *arg_recordings_dir,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_add_device_to_new_group_finish (
    GddManager *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_add_device_to_new_group_sync (
    GddManager *proxy,
    guint arg_adapter,
    guint arg_frontend,
    gint arg_type,
    const gchar *arg_channels_conf,
    const gchar *arg_recordings_dir,
    const gchar *arg_name,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_get_name_of_registered_device (
    GddManager *proxy,
    guint arg_adapter,
    guint arg_frontend,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_get_name_of_registered_device_finish (
    GddManager *proxy,
    gchar **out_name,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_get_name_of_registered_device_sync (
    GddManager *proxy,
    guint arg_adapter,
    guint arg_frontend,
    gchar **out_name,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_get_device_group_size (
    GddManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_get_device_group_size_finish (
    GddManager *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_get_device_group_size_sync (
    GddManager *proxy,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_get_channel_groups (
    GddManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_get_channel_groups_finish (
    GddManager *proxy,
    GVariant **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_get_channel_groups_sync (
    GddManager *proxy,
    GVariant **out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_add_channel_group (
    GddManager *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_add_channel_group_finish (
    GddManager *proxy,
    gint *out_channel_group_id,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_add_channel_group_sync (
    GddManager *proxy,
    const gchar *arg_name,
    gint *out_channel_group_id,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_remove_channel_group (
    GddManager *proxy,
    gint arg_channel_group_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_remove_channel_group_finish (
    GddManager *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_remove_channel_group_sync (
    GddManager *proxy,
    gint arg_channel_group_id,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_get_devices (
    GddManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_get_devices_finish (
    GddManager *proxy,
    GVariant **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_get_devices_sync (
    GddManager *proxy,
    GVariant **out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_manager__call_get_adapter_info (
    GddManager *proxy,
    guint arg_adapter,
    guint arg_frontend,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_manager__call_get_adapter_info_finish (
    GddManager *proxy,
    GVariant **out_info,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_manager__call_get_adapter_info_sync (
    GddManager *proxy,
    guint arg_adapter,
    guint arg_frontend,
    GVariant **out_info,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDD_MANAGER_TYPE__PROXY (gdd_manager__proxy_get_type ())
#define GDD_MANAGER__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDD_MANAGER_TYPE__PROXY, GddManagerProxy))
#define GDD_MANAGER__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDD_MANAGER_TYPE__PROXY, GddManagerProxyClass))
#define GDD_MANAGER__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDD_MANAGER_TYPE__PROXY, GddManagerProxyClass))
#define GDD_MANAGER_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDD_MANAGER_TYPE__PROXY))
#define GDD_MANAGER_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDD_MANAGER_TYPE__PROXY))

typedef struct _GddManagerProxy GddManagerProxy;
typedef struct _GddManagerProxyClass GddManagerProxyClass;
typedef struct _GddManagerProxyPrivate GddManagerProxyPrivate;

struct _GddManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GddManagerProxyPrivate *priv;
};

struct _GddManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdd_manager__proxy_get_type (void) G_GNUC_CONST;

void gdd_manager__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GddManager *gdd_manager__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GddManager *gdd_manager__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdd_manager__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GddManager *gdd_manager__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GddManager *gdd_manager__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDD_MANAGER_TYPE__SKELETON (gdd_manager__skeleton_get_type ())
#define GDD_MANAGER__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDD_MANAGER_TYPE__SKELETON, GddManagerSkeleton))
#define GDD_MANAGER__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDD_MANAGER_TYPE__SKELETON, GddManagerSkeletonClass))
#define GDD_MANAGER__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDD_MANAGER_TYPE__SKELETON, GddManagerSkeletonClass))
#define GDD_MANAGER_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDD_MANAGER_TYPE__SKELETON))
#define GDD_MANAGER_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDD_MANAGER_TYPE__SKELETON))

typedef struct _GddManagerSkeleton GddManagerSkeleton;
typedef struct _GddManagerSkeletonClass GddManagerSkeletonClass;
typedef struct _GddManagerSkeletonPrivate GddManagerSkeletonPrivate;

struct _GddManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GddManagerSkeletonPrivate *priv;
};

struct _GddManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdd_manager__skeleton_get_type (void) G_GNUC_CONST;

GddManager *gdd_manager__skeleton_new (void);


G_END_DECLS

#endif /* __GDD_MANAGER_H__ */
