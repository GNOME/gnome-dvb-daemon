/*
 * Generated by gdbus-codegen 2.42.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GDD_DEVICE_GROUP_H__
#define __GDD_DEVICE_GROUP_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.DVB.DeviceGroup */

#define GDD_DEVICE_GROUP_TYPE_ (gdd_device_group__get_type ())
#define GDD_DEVICE_GROUP_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDD_DEVICE_GROUP_TYPE_, GddDeviceGroup))
#define GDD_DEVICE_GROUP_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDD_DEVICE_GROUP_TYPE_))
#define GDD_DEVICE_GROUP__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDD_DEVICE_GROUP_TYPE_, GddDeviceGroupIface))

struct _GddDeviceGroup;
typedef struct _GddDeviceGroup GddDeviceGroup;
typedef struct _GddDeviceGroupIface GddDeviceGroupIface;

struct _GddDeviceGroupIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_device) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    guint arg_adapter,
    guint arg_frontend);

  gboolean (*handle_get_channel_list) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_members) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_name) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_recorder) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_recordings_directory) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_schedule) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    guint arg_channel_sid);

  gboolean (*handle_get_type) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_device) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    guint arg_adapter,
    guint arg_frontend);

  gboolean (*handle_set_name) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_set_recordings_directory) (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_location);

  void (*device_added) (
    GddDeviceGroup *object,
    guint arg_adapter,
    guint arg_frontend);

  void (*device_removed) (
    GddDeviceGroup *object,
    guint arg_adapter,
    guint arg_frontend);

};

GType gdd_device_group__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdd_device_group__interface_info (void);
guint gdd_device_group__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdd_device_group__complete_get_type (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    gint result);

void gdd_device_group__complete_get_recorder (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void gdd_device_group__complete_add_device (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void gdd_device_group__complete_remove_device (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void gdd_device_group__complete_get_channel_list (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void gdd_device_group__complete_get_name (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void gdd_device_group__complete_set_name (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    gboolean result);

void gdd_device_group__complete_get_members (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *result);

void gdd_device_group__complete_get_schedule (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *opath,
    gboolean result);

void gdd_device_group__complete_get_recordings_directory (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void gdd_device_group__complete_set_recordings_directory (
    GddDeviceGroup *object,
    GDBusMethodInvocation *invocation,
    gboolean result);



/* D-Bus signal emissions functions: */
void gdd_device_group__emit_device_added (
    GddDeviceGroup *object,
    guint arg_adapter,
    guint arg_frontend);

void gdd_device_group__emit_device_removed (
    GddDeviceGroup *object,
    guint arg_adapter,
    guint arg_frontend);



/* D-Bus method calls: */
void gdd_device_group__call_get_type (
    GddDeviceGroup *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_get_type_finish (
    GddDeviceGroup *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_get_type_sync (
    GddDeviceGroup *proxy,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_get_recorder (
    GddDeviceGroup *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_get_recorder_finish (
    GddDeviceGroup *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_get_recorder_sync (
    GddDeviceGroup *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_add_device (
    GddDeviceGroup *proxy,
    guint arg_adapter,
    guint arg_frontend,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_add_device_finish (
    GddDeviceGroup *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_add_device_sync (
    GddDeviceGroup *proxy,
    guint arg_adapter,
    guint arg_frontend,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_remove_device (
    GddDeviceGroup *proxy,
    guint arg_adapter,
    guint arg_frontend,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_remove_device_finish (
    GddDeviceGroup *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_remove_device_sync (
    GddDeviceGroup *proxy,
    guint arg_adapter,
    guint arg_frontend,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_get_channel_list (
    GddDeviceGroup *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_get_channel_list_finish (
    GddDeviceGroup *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_get_channel_list_sync (
    GddDeviceGroup *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_get_name (
    GddDeviceGroup *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_get_name_finish (
    GddDeviceGroup *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_get_name_sync (
    GddDeviceGroup *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_set_name (
    GddDeviceGroup *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_set_name_finish (
    GddDeviceGroup *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_set_name_sync (
    GddDeviceGroup *proxy,
    const gchar *arg_name,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_get_members (
    GddDeviceGroup *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_get_members_finish (
    GddDeviceGroup *proxy,
    gchar ***out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_get_members_sync (
    GddDeviceGroup *proxy,
    gchar ***out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_get_schedule (
    GddDeviceGroup *proxy,
    guint arg_channel_sid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_get_schedule_finish (
    GddDeviceGroup *proxy,
    gchar **out_opath,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_get_schedule_sync (
    GddDeviceGroup *proxy,
    guint arg_channel_sid,
    gchar **out_opath,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_get_recordings_directory (
    GddDeviceGroup *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_get_recordings_directory_finish (
    GddDeviceGroup *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_get_recordings_directory_sync (
    GddDeviceGroup *proxy,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void gdd_device_group__call_set_recordings_directory (
    GddDeviceGroup *proxy,
    const gchar *arg_location,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdd_device_group__call_set_recordings_directory_finish (
    GddDeviceGroup *proxy,
    gboolean *out_result,
    GAsyncResult *res,
    GError **error);

gboolean gdd_device_group__call_set_recordings_directory_sync (
    GddDeviceGroup *proxy,
    const gchar *arg_location,
    gboolean *out_result,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDD_DEVICE_GROUP_TYPE__PROXY (gdd_device_group__proxy_get_type ())
#define GDD_DEVICE_GROUP__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDD_DEVICE_GROUP_TYPE__PROXY, GddDeviceGroupProxy))
#define GDD_DEVICE_GROUP__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDD_DEVICE_GROUP_TYPE__PROXY, GddDeviceGroupProxyClass))
#define GDD_DEVICE_GROUP__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDD_DEVICE_GROUP_TYPE__PROXY, GddDeviceGroupProxyClass))
#define GDD_DEVICE_GROUP_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDD_DEVICE_GROUP_TYPE__PROXY))
#define GDD_DEVICE_GROUP_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDD_DEVICE_GROUP_TYPE__PROXY))

typedef struct _GddDeviceGroupProxy GddDeviceGroupProxy;
typedef struct _GddDeviceGroupProxyClass GddDeviceGroupProxyClass;
typedef struct _GddDeviceGroupProxyPrivate GddDeviceGroupProxyPrivate;

struct _GddDeviceGroupProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GddDeviceGroupProxyPrivate *priv;
};

struct _GddDeviceGroupProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdd_device_group__proxy_get_type (void) G_GNUC_CONST;

void gdd_device_group__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GddDeviceGroup *gdd_device_group__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GddDeviceGroup *gdd_device_group__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdd_device_group__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GddDeviceGroup *gdd_device_group__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GddDeviceGroup *gdd_device_group__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDD_DEVICE_GROUP_TYPE__SKELETON (gdd_device_group__skeleton_get_type ())
#define GDD_DEVICE_GROUP__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDD_DEVICE_GROUP_TYPE__SKELETON, GddDeviceGroupSkeleton))
#define GDD_DEVICE_GROUP__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDD_DEVICE_GROUP_TYPE__SKELETON, GddDeviceGroupSkeletonClass))
#define GDD_DEVICE_GROUP__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDD_DEVICE_GROUP_TYPE__SKELETON, GddDeviceGroupSkeletonClass))
#define GDD_DEVICE_GROUP_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDD_DEVICE_GROUP_TYPE__SKELETON))
#define GDD_DEVICE_GROUP_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDD_DEVICE_GROUP_TYPE__SKELETON))

typedef struct _GddDeviceGroupSkeleton GddDeviceGroupSkeleton;
typedef struct _GddDeviceGroupSkeletonClass GddDeviceGroupSkeletonClass;
typedef struct _GddDeviceGroupSkeletonPrivate GddDeviceGroupSkeletonPrivate;

struct _GddDeviceGroupSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GddDeviceGroupSkeletonPrivate *priv;
};

struct _GddDeviceGroupSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdd_device_group__skeleton_get_type (void) G_GNUC_CONST;

GddDeviceGroup *gdd_device_group__skeleton_new (void);


G_END_DECLS

#endif /* __GDD_DEVICE_GROUP_H__ */
